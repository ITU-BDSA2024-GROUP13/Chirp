name: Bump Version and Create Release

on:
  push:
    branches:
      - main
      - release-yaml

jobs:

  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

        # Step 1: Analyze the commit message to determine if we need to bump the version
      - name: Check commit message for keywords
        id: version_type
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ "major" ]]; then
            echo "version_type=major" >> $GITHUB_ENV
          elif [[ "${{ github.event.head_commit.message }}" =~ "minor" ]]; then
            echo "version_type=minor" >> $GITHUB_ENV
          elif [[ "${{ github.event.head_commit.message }}" =~ "patch" ]]; then
            echo "version_type=patch" >> $GITHUB_ENV
          else
            echo "version_type=none" >> $GITHUB_ENV
          fi

      # Step 2: Increment version using Git tags (or modify your .csproj)
      - name: Bump version
        if: env.version_type != 'none'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Get latest version tag or set default
          LATEST_VERSION=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          
          # Extract version parts
          MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
          PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3)
          
          # Increment version based on the commit message
          if [ "${{ env.version_type }}" = "major" ]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif [ "${{ env.version_type }}" = "minor" ]; then
            MINOR=$((MINOR+1))
            PATCH=0
          elif [ "${{ env.version_type }}" = "patch" ]; then
            PATCH=$((PATCH+1))
          fi

          # New version tag
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          
          # Tag and commit the version bump
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

      # Get the version from Git tags to use for tagging the release
      - name: Get version from Git tags
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> $GITHUB_ENV

      # Step 5: Create a new GitHub Release with the updated version
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.version }}"
          release_name: "Release ${{ env.version }}"
          draft: false
          prerelease: false
